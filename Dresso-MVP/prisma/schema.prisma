// ---------- Prisma Client & DB ----------
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ---------- Enums ----------
enum Role {
  USER
  ADMIN
}

enum ListingStatus {
  ACTIVE
  SOLD
  HIDDEN
  REMOVED
}

enum Condition {
  NEW
  LIKE_NEW
  GOOD
  OK
}

enum DressLength {
  MINI
  MIDI
  MAXI
}

enum Material {
  SATIN
  SILK
  CHIFFON
  LACE
  VELVET
  SEQUINS
  TULLE
  OTHER
}

enum Color {
  BLACK
  WHITE
  RED
  BLUE
  GREEN
  PINK
  PURPLE
  BEIGE
  SILVER
  GOLD
  MULTI
  OTHER
}

// ---------- Models ----------
model User {
  id        String    @id @default(cuid())
  createdAt DateTime  @default(now())
  email     String    @unique
  name      String?
  phone     String?
  role      Role      @default(USER)

  // Relations
  listings         Listing[]                 // annonser som säljare
  boughtListings   Listing[] @relation("ListingBuyer") // annonser köpta av användaren
  favorites        Favorite[]
  messagesSent      Message[]      @relation("MessagesSent")
  messagesReceived  Message[]      @relation("MessagesReceived")
  // (valfritt) kopplingar till konversationer:
  // conversationsAsSeller Conversation[] @relation("ConversationSeller")
  // conversationsAsBuyer  Conversation[] @relation("ConversationBuyer")

  payments         Payment[]

  @@index([email])
}

model Listing {
  id             String         @id @default(cuid())
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  title          String
  description    String
  price          Int            // SEK i heltal
  size           String         // "EU32"..."EU48" etc
  brand          String?
  images         String[]       // bild-URLs

  // Filterbara fält
  length         DressLength
  color          Color
  material       Material
  condition      Condition
  status         ListingStatus  @default(ACTIVE)

  // Boost
  bumpedAt       DateTime?
  highlightUntil DateTime?

  // Relationer
  sellerId String
  seller   User     @relation(fields: [sellerId], references: [id])

  buyerId  String?
  buyer    User?    @relation("ListingBuyer", fields: [buyerId], references: [id])

  favorites Favorite[]
  messages  Message[] @relation("ListingMessages")
  payments  Payment[]

  @@index([sellerId])
  @@index([status, createdAt])
  @@index([length, color, material])
}
model Conversation {
  id         String   @id @default(cuid())
  createdAt  DateTime @default(now())

  // Vilken annons chatten gäller
  listingId  String
  listing    Listing  @relation(fields: [listingId], references: [id])

  // Parterna i chatten
  sellerId   String
  seller     User     @relation("ConversationSeller", fields: [sellerId], references: [id])

  buyerId    String
  buyer      User     @relation("ConversationBuyer", fields: [buyerId], references: [id])

  // Meddelanden i denna konversation
  messages   Message[] @relation("ConversationMessages")

  @@unique([listingId, sellerId, buyerId])
  @@index([listingId])
  @@index([sellerId])
  @@index([buyerId])
}

model Favorite {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())

  userId    String
  listingId String

  user      User    @relation(fields: [userId], references: [id])
  listing   Listing @relation(fields: [listingId], references: [id])

  @@unique([userId, listingId])
  @@index([userId])
  @@index([listingId])
}

model Message {
  id            String        @id @default(cuid())
  createdAt     DateTime      @default(now())
  content       String

  // Avsändare/mottagare
  senderId      String
  recipientId   String
  sender        User          @relation("MessagesSent",     fields: [senderId],    references: [id])
  recipient     User          @relation("MessagesReceived", fields: [recipientId], references: [id])

  // Kopplat till annons (valfritt)
  listingId     String?
  listing       Listing?      @relation("ListingMessages", fields: [listingId], references: [id])

  // Kopplat till konversation (krävs av API:t)
  conversationId String?
  conversation   Conversation? @relation("ConversationMessages", fields: [conversationId], references: [id])

  @@index([senderId])
  @@index([recipientId])
  @@index([listingId])
  @@index([conversationId])
}


model Payment {
  id              String   @id @default(cuid())
  createdAt       DateTime @default(now())
  amount          Int      // SEK
  currency        String   @default("SEK")
  status          String   // "pending" | "paid" | "failed" etc
  stripeSessionId String   @unique

  userId    String
  listingId String

  user      User    @relation(fields: [userId], references: [id])
  listing   Listing @relation(fields: [listingId], references: [id])

  @@index([userId])
  @@index([listingId])
}
